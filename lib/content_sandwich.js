// Generated by CoffeeScript 1.3.3
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.ContentSandwich = function(group) {
    var _base;
    return (_base = ContentSandwich.instances)[group] || (_base[group] = new ContentSandwich.StateMachine(group));
  };

  ContentSandwich.instances = {};

  ContentSandwich.state = {};

  $(function() {
    var groups;
    groups = $("[data-state-group]").map(function(i, el) {
      return $(el).attr('data-state-group');
    });
    return _.chain(groups).uniq().each(function(group) {
      return ContentSandwich(group);
    });
  });

  ContentSandwich.StateMachine = (function() {

    function StateMachine(group) {
      this.group = group;
      this.functions = {};
      this.events = "click";
      this.global_listeners();
      this.init();
    }

    StateMachine.prototype.init = function() {
      var _this = this;
      this.states = $("[data-state][data-state-group='" + this.group + "']").map(function(i, state) {
        return $(state).attr("data-state");
      });
      this.iterative_listeners();
      _.each(this.states, function(state) {
        return _this.state_listeners(state);
      });
      this.transition_in = function($elem) {
        return $elem.show();
      };
      this.transition_out = function($elem) {
        return $elem.hide();
      };
      this.deserialize();
      if (this.states[0] && !this.current_state) {
        return this.transition(this.states[0]);
      }
    };

    StateMachine.prototype.global_listeners = function() {
      var _this = this;
      return $(document).on("ajax:complete ajaxComplete", function() {
        return _this.init();
      });
    };

    StateMachine.prototype.iterative_listeners = function() {
      var _this = this;
      jQuery(document).on(this.events, "[data-state-transition-next='" + this.group + "']", function(e) {
        var index, length;
        index = _.indexOf(_this.states, _this.current_state);
        length = _this.states.length;
        e.preventDefault();
        if (index !== (length - 1)) {
          return _this.transition(_this.states[index + 1]);
        } else {
          return _this.transition(_this.states[0]);
        }
      });
      return jQuery(document).on(this.events, "[data-state-transition-previous='" + this.group + "']", function(e) {
        var index, length;
        index = _.indexOf(_this.states, _this.current_state);
        length = _this.states.length;
        e.preventDefault();
        if (index !== 0) {
          return _this.transition(_this.states[index - 1]);
        } else {
          return _this.transition(_this.states[length - 1]);
        }
      });
    };

    StateMachine.prototype.state_listeners = function(stateName) {
      var _this = this;
      $(document).off("click", "[data-state-group='" + this.group + "'][data-state-transition='" + stateName + "']");
      return $(document).on("click", "[data-state-group='" + this.group + "'][data-state-transition='" + stateName + "']", function(e) {
        e.preventDefault();
        _this.transition($(e.currentTarget).attr("data-state-transition"));
        return $(document).trigger("transition:" + stateName);
      });
    };

    StateMachine.prototype.transition = function(stateName) {
      var _base, _base1, _name;
      if (__indexOf.call(this.states, stateName) < 0) {
        throw "Undefined state `" + stateName + "`";
      }
      if ((typeof (_base = this.functions)[stateName] === "function" ? _base[stateName]() : void 0) !== false && stateName !== this.current_state) {
        this.transition_in($("[data-state-group='" + this.group + "'][data-state='" + stateName + "']"));
        this.transition_out($("[data-state-group='" + this.group + "'][data-state][data-state!='" + stateName + "']"));
        _.each(this.states, function(state) {
          return $("[data-state-transition='" + state + "']").toggleClass('active_tab', state === stateName);
        });
        this.current_state = stateName;
        $(document).trigger("transition:" + this.group);
      } else {
        $(document).trigger("transition:cancel:" + this.group);
        if (typeof (_base1 = this.functions)[_name = this.current_state] === "function") {
          _base1[_name]();
        }
      }
      return this.serialize();
    };

    StateMachine.prototype.on = function(stateName, func) {
      return this.functions[stateName] = func;
    };

    StateMachine.prototype.off = function(stateName) {
      return this.functions[stateName] = null;
    };

    StateMachine.prototype.serialize = function() {
      var state;
      if (this.current_state) {
        ContentSandwich.state[this.group] = this.current_state;
      }
      if (history.replaceState) {
        state = _.map(ContentSandwich.state, function(state, group) {
          return "" + group + "/" + state;
        }).join('//');
        return typeof history.replaceState === "function" ? history.replaceState({}, document.title, "" + location.pathname + "#" + state) : void 0;
      }
    };

    StateMachine.prototype.deserialize = function() {
      var states,
        _this = this;
      if (location.hash !== '') {
        states = location.hash.split('#')[1].split('//');
        return _.each(states, function(pair) {
          var group, state, _ref;
          _ref = pair.split('/'), group = _ref[0], state = _ref[1];
          if (group === _this.group) {
            return _this.transition(state);
          }
        });
      }
    };

    return StateMachine;

  })();

}).call(this);
